#!/usr/bin/env python3

"""
pushes your working changes from a local clone of a
git repo to a remote clone of the repo using ssh/rsync.
each file mentioned in a local `git status` gets
pushed or remotely deleted to match the local state.
For the sake of terminology, let's call local clone "source",
and the remote clone "target".

This program is optimized to leave mtimes untouched whenever possible,
and to present rsync with a minimal set of files to consider.

This program runs `git fetch origin` on the target (via ssh),
but does not modify any other git metadata in the source or target clones.
This program assumes that the source remote `origin`
is the same as the target remote `origin`.
This program requires python3 on the source and remote machines.

TODO: support submodules.

WARNING: Obliterates any working tree changes in the remote clone without confirmation.
"""

import os, sys, subprocess
import json

def cli():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("host", help="the host to push to recognizable by ssh and rsync.")
    parser.add_argument("remote_repo_root", nargs="?", help=
        "path to the root of the remote git repo. " +
        "defaults to the same path as the local repo relative to each $HOME. " +
        "a relative path is relative to the remote $HOME. " +
        "if the local repo is not relative to $HOME, this option is required.")
    args = parser.parse_args()

    abs_local_repo_dir = git_rev_parse("--show-toplevel")
    remote_repo_root = args.remote_repo_root
    if remote_repo_root == None:
        remote_repo_root = relpath_down(abs_local_repo_dir, os.environ["HOME"])
        if remote_repo_root == None:
            parser.error(
                "remote_repo_root is required when local git dir is outside home: " +
                abs_local_repo_dir + " is outside " + os.environ["HOME"]
            )

    main(abs_local_repo_dir, args.host, remote_repo_root)

def main(abs_local_repo_dir, hostname, remote_repo_root):
    target_info = get_target_info(hostname, remote_repo_root)

    for diff_to in target_info["diffs_to"]:
        try:
            git_diff_output = git("diff", "--name-only", "-z", diff_to["sha1"], stderr=subprocess.DEVNULL)
        except subprocess.CalledProcessError:
            # we don't know about that sha1
            continue
        else:
            # found it.
            all_changed_files = set()
            all_changed_files.update(git_diff_output.split("\x00")[:-1])
            all_changed_files.update(diff_to["files"])
            break
    else:
        lines = ["couldn't find any git commits in common between source and target git repos."]
        # Sanity check the urls.
        origin_url = git("config", "--get", "remote.origin.url").rstrip()
        if origin_url != target_info["origin_url"]:
            # you probably specified the wrong targe trepo path.
            lines.extend([
                "the origin urls are different:",
                "  source: " + origin_url,
                "  target: " + target_info["origin_url"],
            ])
        else:
            # this is possible if you've manually fetched and updated the target
            # beyond the origin/master commit the source is aware of.
            lines.append("try doing a `git fetch`?")
        sys.exit("\n".join("ERROR: " + line for line in lines))

    rsync_options = [
        # verbose, archive, compress
        "-vaz",
        # if i tell you to delete, then delete it.
        "--delete-missing-args",
        # if i tell you to delete a directory, then delete it.
        "--force",
    ]
    rsync_cmd = ["rsync"] + rsync_options + ["--from0", "--files-from", "-", abs_local_repo_dir, hostname + ":" + remote_repo_root]
    rsync_process = subprocess.Popen(rsync_cmd, stdin=subprocess.PIPE)
    rsync_process.communicate("\x00".join(all_changed_files).encode("utf8"))
    check_returncode(rsync_process, rsync_cmd)

remote_program_prolog_template = """
cwd = %(cwd)s
"""
remote_program_body = r"""
import sys, json, subprocess

def git(*args):
    return subprocess.check_output(["git"] + list(args), cwd=cwd).decode("utf8")

git("fetch", "origin")

# The merge-base is the most recent commit that's part of the master branch.
merge_base = git("merge-base", "origin/master", "HEAD").rstrip()

# List all the revisions on this dev branch including the commit in common with master branch
commit_list = git("log", merge_base + "..HEAD", "--format=%H", "-z").split("\x00")[:-1] + [merge_base]

json.dump({
    # Sanity check that we're talking about the same repository.
    "origin_url": git("config", "--get", "remote.origin.url").rstrip(),

    # The current target sha1 tells us the most about the state,
    # as long as the source has a record of this sha1.
    "sha1": git("rev-parse", "--verify", "HEAD").rstrip(),

    # If the source doesn't recognize the target's sha1,
    # it's usually because the target is operating on a dev branch
    # that has since been force pushed.
    # Give file-name diff info from the target's current state
    # against every commit on this dev branch back to master.
    "diffs_to": [
        {"sha1": rev, "files": git("diff", "--name-only", "-z", rev).split("\x00")[:-1]}
        for rev in commit_list
    ],
}, sys.stdout)
"""

def get_target_info(hostname, remote_repo_root):
    cmd = [
        "ssh", hostname,
        # we can't just throw arbitrary parameters here,
        # because all of this is interpreted by a shell.
        "python3", "-",
    ]
    # inject the variable data directly in the source code bytes,
    # so that ssh's shell interpretation doesn't mess with it.
    stdin = remote_program_prolog_template % {
        "cwd": repr(remote_repo_root),
    } + remote_program_body

    process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    (stdout, _) = process.communicate(stdin.encode("utf8"))
    check_returncode(process, cmd)
    return json.loads(stdout.decode("utf8"))

def check_returncode(process, cmd):
    if process.returncode != 0:
        raise subprocess.CalledProcessError(process.returncode, cmd)

def git_rev_parse(arg):
    # there's no option for null-terminated output from this command.
    return git("rev-parse", arg).rstrip()

def git(*args, **kwargs):
    return subprocess.check_output(["git"] + list(args), **kwargs).decode("utf8")

def relpath_down(path, start):
    """like os.path.relpath, but returns None if the path would go ../up"""
    path_segments = split_path_all_the_way(path)
    start_segments = split_path_all_the_way(start)
    if path_segments[:len(start_segments)] != start_segments:
        return None
    return os.path.join(*path_segments[len(start_segments):])
def split_path_all_the_way(path):
    """os.path.split repeatedly"""
    result = []
    while True:
        new_path, segment = os.path.split(path)
        if new_path == path:
            break
        path = new_path
        result.append(segment)
    result.append(path)
    result.reverse()
    return result

if __name__ == "__main__":
    cli()
